///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
// ignore_for_file: non_constant_identifier_names, file_names

class AllShowsLinksPreviousepisode {
/*
{
  "href": "https://api.tvmaze.com/episodes/185054"
} 
*/

  String? href;

  AllShowsLinksPreviousepisode({
    this.href,
  });
  AllShowsLinksPreviousepisode.fromJson(Map<String, dynamic> json) {
    href = json['href']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['href'] = href;
    return data;
  }
}

class AllShowsLinksSelf {
/*
{
  "href": "https://api.tvmaze.com/shows/1"
} 
*/

  String? href;

  AllShowsLinksSelf({
    this.href,
  });
  AllShowsLinksSelf.fromJson(Map<String, dynamic> json) {
    href = json['href']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['href'] = href;
    return data;
  }
}

class AllShowsLinks {
/*
{
  "self": {
    "href": "https://api.tvmaze.com/shows/1"
  },
  "previousepisode": {
    "href": "https://api.tvmaze.com/episodes/185054"
  }
} 
*/

  AllShowsLinksSelf? self;
  AllShowsLinksPreviousepisode? previousepisode;

  AllShowsLinks({
    this.self,
    this.previousepisode,
  });
  AllShowsLinks.fromJson(Map<String, dynamic> json) {
    self = (json['self'] != null && (json['self'] is Map))
        ? AllShowsLinksSelf.fromJson(json['self'])
        : null;
    previousepisode =
        (json['previousepisode'] != null && (json['previousepisode'] is Map))
            ? AllShowsLinksPreviousepisode.fromJson(json['previousepisode'])
            : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (self != null) {
      data['self'] = self!.toJson();
    }
    if (previousepisode != null) {
      data['previousepisode'] = previousepisode!.toJson();
    }
    return data;
  }
}

class AllShowsImage {
/*
{
  "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/81/202627.jpg",
  "original": "https://static.tvmaze.com/uploads/images/original_untouched/81/202627.jpg"
} 
*/

  String? medium;
  String? original;

  AllShowsImage({
    this.medium,
    this.original,
  });
  AllShowsImage.fromJson(Map<String, dynamic> json) {
    medium = json['medium']?.toString();
    original = json['original']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['medium'] = medium;
    data['original'] = original;
    return data;
  }
}

class AllShowsExternals {
/*
{
  "tvrage": 25988,
  "thetvdb": 264492,
  "imdb": "tt1553656"
} 
*/

  int? tvrage;
  int? thetvdb;
  String? imdb;

  AllShowsExternals({
    this.tvrage,
    this.thetvdb,
    this.imdb,
  });
  AllShowsExternals.fromJson(Map<String, dynamic> json) {
    tvrage = int.tryParse(json['tvrage']?.toString() ?? '');
    thetvdb = int.tryParse(json['thetvdb']?.toString() ?? '');
    imdb = json['imdb']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['tvrage'] = tvrage;
    data['thetvdb'] = thetvdb;
    data['imdb'] = imdb;
    return data;
  }
}

class AllShowsNetworkCountry {
/*
{
  "name": "United States",
  "code": "US",
  "timezone": "America/New_York"
} 
*/

  String? name;
  String? code;
  String? timezone;

  AllShowsNetworkCountry({
    this.name,
    this.code,
    this.timezone,
  });
  AllShowsNetworkCountry.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    code = json['code']?.toString();
    timezone = json['timezone']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['code'] = code;
    data['timezone'] = timezone;
    return data;
  }
}

class AllShowsNetwork {
/*
{
  "id": 2,
  "name": "CBS",
  "country": {
    "name": "United States",
    "code": "US",
    "timezone": "America/New_York"
  }
} 
*/

  int? id;
  String? name;
  AllShowsNetworkCountry? country;

  AllShowsNetwork({
    this.id,
    this.name,
    this.country,
  });
  AllShowsNetwork.fromJson(Map<String, dynamic> json) {
    id = int.tryParse(json['id']?.toString() ?? '');
    name = json['name']?.toString();
    country = (json['country'] != null && (json['country'] is Map))
        ? AllShowsNetworkCountry.fromJson(json['country'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    if (country != null) {
      data['country'] = country!.toJson();
    }
    return data;
  }
}

class AllShowsRating {
/*
{
  "average": 6.5
} 
*/

  double? average;

  AllShowsRating({
    this.average,
  });
  AllShowsRating.fromJson(Map<String, dynamic> json) {
    average = double.tryParse(json['average']?.toString() ?? '');
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['average'] = average;
    return data;
  }
}

class AllShowsSchedule {
/*
{
  "time": "22:00",
  "days": [
    "Thursday"
  ]
} 
*/

  String? time;
  List<String?>? days;

  AllShowsSchedule({
    this.time,
    this.days,
  });
  AllShowsSchedule.fromJson(Map<String, dynamic> json) {
    time = json['time']?.toString();
    if (json['days'] != null && (json['days'] is List)) {
      final v = json['days'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      days = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['time'] = time;
    if (days != null) {
      final v = days;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['days'] = arr0;
    }
    return data;
  }
}

class AllShows {
/*
{
  "id": 1,
  "url": "https://www.tvmaze.com/shows/1/under-the-dome",
  "name": "Under the Dome",
  "type": "Scripted",
  "language": "English",
  "genres": [
    "Drama"
  ],
  "status": "Ended",
  "runtime": 60,
  "averageRuntime": 60,
  "premiered": "2013-06-24",
  "ended": "2015-09-10",
  "officialSite": "http://www.cbs.com/shows/under-the-dome/",
  "schedule": {
    "time": "22:00",
    "days": [
      "Thursday"
    ]
  },
  "rating": {
    "average": 6.5
  },
  "weight": 98,
  "network": {
    "id": 2,
    "name": "CBS",
    "country": {
      "name": "United States",
      "code": "US",
      "timezone": "America/New_York"
    }
  },
  "webChannel": null,
  "dvdCountry": null,
  "externals": {
    "tvrage": 25988,
    "thetvdb": 264492,
    "imdb": "tt1553656"
  },
  "image": {
    "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/81/202627.jpg",
    "original": "https://static.tvmaze.com/uploads/images/original_untouched/81/202627.jpg"
  },
  "summary": "<p><b>Under the Dome</b> is the story of a small town that is suddenly and inexplicably sealed off from the rest of the world by an enormous transparent dome. The town's inhabitants must deal with surviving the post-apocalyptic conditions while searching for answers about the dome, where it came from and if and when it will go away.</p>",
  "updated": 1631010933,
  "_links": {
    "self": {
      "href": "https://api.tvmaze.com/shows/1"
    },
    "previousepisode": {
      "href": "https://api.tvmaze.com/episodes/185054"
    }
  }
} 
*/

  int? id;
  String? url;
  String? name;
  String? type;
  String? language;
  List<String?>? genres;
  String? status;
  int? runtime;
  int? averageRuntime;
  String? premiered;
  String? ended;
  String? officialSite;
  AllShowsSchedule? schedule;
  AllShowsRating? rating;
  int? weight;
  AllShowsNetwork? network;
  String? webChannel;
  String? dvdCountry;
  AllShowsExternals? externals;
  AllShowsImage? image;
  String? summary;
  int? updated;
  AllShowsLinks? Links;

  AllShows({
    this.id,
    this.url,
    this.name,
    this.type,
    this.language,
    this.genres,
    this.status,
    this.runtime,
    this.averageRuntime,
    this.premiered,
    this.ended,
    this.officialSite,
    this.schedule,
    this.rating,
    this.weight,
    this.network,
    this.webChannel,
    this.dvdCountry,
    this.externals,
    this.image,
    this.summary,
    this.updated,
    this.Links,
  });
  AllShows.fromJson(Map<String, dynamic> json) {
    id = int.tryParse(json['id']?.toString() ?? '');
    url = json['url']?.toString();
    name = json['name']?.toString();
    type = json['type']?.toString();
    language = json['language']?.toString();
    if (json['genres'] != null && (json['genres'] is List)) {
      final v = json['genres'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      genres = arr0;
    }
    status = json['status']?.toString();
    runtime = int.tryParse(json['runtime']?.toString() ?? '');
    averageRuntime = int.tryParse(json['averageRuntime']?.toString() ?? '');
    premiered = json['premiered']?.toString();
    ended = json['ended']?.toString();
    officialSite = json['officialSite']?.toString();
    schedule = (json['schedule'] != null && (json['schedule'] is Map))
        ? AllShowsSchedule.fromJson(json['schedule'])
        : null;
    rating = (json['rating'] != null && (json['rating'] is Map))
        ? AllShowsRating.fromJson(json['rating'])
        : null;
    weight = int.tryParse(json['weight']?.toString() ?? '');
    network = (json['network'] != null && (json['network'] is Map))
        ? AllShowsNetwork.fromJson(json['network'])
        : null;
    webChannel = json['webChannel']?.toString();
    dvdCountry = json['dvdCountry']?.toString();
    externals = (json['externals'] != null && (json['externals'] is Map))
        ? AllShowsExternals.fromJson(json['externals'])
        : null;
    image = (json['image'] != null && (json['image'] is Map))
        ? AllShowsImage.fromJson(json['image'])
        : null;
    summary = json['summary']?.toString();
    updated = int.tryParse(json['updated']?.toString() ?? '');
    Links = (json['_links'] != null && (json['_links'] is Map))
        ? AllShowsLinks.fromJson(json['_links'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['url'] = url;
    data['name'] = name;
    data['type'] = type;
    data['language'] = language;
    if (genres != null) {
      final v = genres;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['genres'] = arr0;
    }
    data['status'] = status;
    data['runtime'] = runtime;
    data['averageRuntime'] = averageRuntime;
    data['premiered'] = premiered;
    data['ended'] = ended;
    data['officialSite'] = officialSite;
    if (schedule != null) {
      data['schedule'] = schedule!.toJson();
    }
    if (rating != null) {
      data['rating'] = rating!.toJson();
    }
    data['weight'] = weight;
    if (network != null) {
      data['network'] = network!.toJson();
    }
    data['webChannel'] = webChannel;
    data['dvdCountry'] = dvdCountry;
    if (externals != null) {
      data['externals'] = externals!.toJson();
    }
    if (image != null) {
      data['image'] = image!.toJson();
    }
    data['summary'] = summary;
    data['updated'] = updated;
    if (Links != null) {
      data['_links'] = Links!.toJson();
    }
    return data;
  }
}
