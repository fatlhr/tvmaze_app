///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class SearchShowsShowLinksPreviousepisode {
/*
{
  "href": "https://api.tvmaze.com/episodes/2288003"
} 
*/

  String? href;

  SearchShowsShowLinksPreviousepisode({
    this.href,
  });
  SearchShowsShowLinksPreviousepisode.fromJson(Map<String, dynamic> json) {
    href = json['href']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['href'] = href;
    return data;
  }
}

class SearchShowsShowLinksSelf {
/*
{
  "href": "https://api.tvmaze.com/shows/53994"
} 
*/

  String? href;

  SearchShowsShowLinksSelf({
    this.href,
  });
  SearchShowsShowLinksSelf.fromJson(Map<String, dynamic> json) {
    href = json['href']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['href'] = href;
    return data;
  }
}

class SearchShowsShowLinks {
/*
{
  "self": {
    "href": "https://api.tvmaze.com/shows/53994"
  },
  "previousepisode": {
    "href": "https://api.tvmaze.com/episodes/2288003"
  }
} 
*/

  SearchShowsShowLinksSelf? self;
  SearchShowsShowLinksPreviousepisode? previousepisode;

  SearchShowsShowLinks({
    this.self,
    this.previousepisode,
  });
  SearchShowsShowLinks.fromJson(Map<String, dynamic> json) {
    self = (json['self'] != null)
        ? SearchShowsShowLinksSelf.fromJson(json['self'])
        : null;
    previousepisode = (json['previousepisode'] != null)
        ? SearchShowsShowLinksPreviousepisode.fromJson(json['previousepisode'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (self != null) {
      data['self'] = self!.toJson();
    }
    if (previousepisode != null) {
      data['previousepisode'] = previousepisode!.toJson();
    }
    return data;
  }
}

class SearchShowsShowImage {
/*
{
  "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/299/748247.jpg",
  "original": "https://static.tvmaze.com/uploads/images/original_untouched/299/748247.jpg"
} 
*/

  String? medium;
  String? original;

  SearchShowsShowImage({
    this.medium,
    this.original,
  });
  SearchShowsShowImage.fromJson(Map<String, dynamic> json) {
    medium = json['medium']?.toString();
    original = json['original']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['medium'] = medium;
    data['original'] = original;
    return data;
  }
}

class SearchShowsShowExternals {
/*
{
  "tvrage": null,
  "thetvdb": 397733,
  "imdb": "tt14188230"
} 
*/

  String? tvrage;
  int? thetvdb;
  String? imdb;

  SearchShowsShowExternals({
    this.tvrage,
    this.thetvdb,
    this.imdb,
  });
  SearchShowsShowExternals.fromJson(Map<String, dynamic> json) {
    tvrage = json['tvrage']?.toString();
    thetvdb = json['thetvdb']?.toInt();
    imdb = json['imdb']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['tvrage'] = tvrage;
    data['thetvdb'] = thetvdb;
    data['imdb'] = imdb;
    return data;
  }
}

class SearchShowsShowNetworkCountry {
/*
{
  "name": "Australia",
  "code": "AU",
  "timezone": "Australia/Sydney"
} 
*/

  String? name;
  String? code;
  String? timezone;

  SearchShowsShowNetworkCountry({
    this.name,
    this.code,
    this.timezone,
  });
  SearchShowsShowNetworkCountry.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    code = json['code']?.toString();
    timezone = json['timezone']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['code'] = code;
    data['timezone'] = timezone;
    return data;
  }
}

class SearchShowsShowNetwork {
/*
{
  "id": 120,
  "name": "Nine Network",
  "country": {
    "name": "Australia",
    "code": "AU",
    "timezone": "Australia/Sydney"
  }
} 
*/

  int? id;
  String? name;
  SearchShowsShowNetworkCountry? country;

  SearchShowsShowNetwork({
    this.id,
    this.name,
    this.country,
  });
  SearchShowsShowNetwork.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    name = json['name']?.toString();
    country = (json['country'] != null)
        ? SearchShowsShowNetworkCountry.fromJson(json['country'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    if (country != null) {
      data['country'] = country!.toJson();
    }
    return data;
  }
}

class SearchShowsShowRating {
/*
{
  "average": null
} 
*/

  String? average;

  SearchShowsShowRating({
    this.average,
  });
  SearchShowsShowRating.fromJson(Map<String, dynamic> json) {
    average = json['average']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['average'] = average;
    return data;
  }
}

class SearchShowsShowSchedule {
/*
{
  "time": "21:00",
  "days": [
    "Wednesday"
  ]
} 
*/

  String? time;
  List<String?>? days;

  SearchShowsShowSchedule({
    this.time,
    this.days,
  });
  SearchShowsShowSchedule.fromJson(Map<String, dynamic> json) {
    time = json['time']?.toString();
    if (json['days'] != null) {
      final v = json['days'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      days = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['time'] = time;
    if (days != null) {
      final v = days;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['days'] = arr0;
    }
    return data;
  }
}

class SearchShowsShow {
/*
{
  "id": 53994,
  "url": "https://www.tvmaze.com/shows/53994/under-investigation",
  "name": "Under Investigation",
  "type": "Documentary",
  "language": "English",
  "genres": [
    "Crime"
  ],
  "status": "Running",
  "runtime": 60,
  "averageRuntime": 56,
  "premiered": "2021-03-01",
  "ended": null,
  "officialSite": "https://www.9now.com.au/under-investigation",
  "schedule": {
    "time": "21:00",
    "days": [
      "Wednesday"
    ]
  },
  "rating": {
    "average": null
  },
  "weight": 88,
  "network": {
    "id": 120,
    "name": "Nine Network",
    "country": {
      "name": "Australia",
      "code": "AU",
      "timezone": "Australia/Sydney"
    }
  },
  "webChannel": null,
  "dvdCountry": null,
  "externals": {
    "tvrage": null,
    "thetvdb": 397733,
    "imdb": "tt14188230"
  },
  "image": {
    "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/299/748247.jpg",
    "original": "https://static.tvmaze.com/uploads/images/original_untouched/299/748247.jpg"
  },
  "summary": "<p><b>Under Investigation</b> will seek to solve crimes, uncover new evidence, hear from people who have never spoken publicly, while harnessing great knowledge and skill with exciting and innovative storytelling techniques.</p>",
  "updated": 1646295576,
  "_links": {
    "self": {
      "href": "https://api.tvmaze.com/shows/53994"
    },
    "previousepisode": {
      "href": "https://api.tvmaze.com/episodes/2288003"
    }
  }
} 
*/

  int? id;
  String? url;
  String? name;
  String? type;
  String? language;
  List<String?>? genres;
  String? status;
  int? runtime;
  int? averageRuntime;
  String? premiered;
  String? ended;
  String? officialSite;
  SearchShowsShowSchedule? schedule;
  SearchShowsShowRating? rating;
  int? weight;
  SearchShowsShowNetwork? network;
  String? webChannel;
  String? dvdCountry;
  SearchShowsShowExternals? externals;
  SearchShowsShowImage? image;
  String? summary;
  int? updated;
  SearchShowsShowLinks? Links;

  SearchShowsShow({
    this.id,
    this.url,
    this.name,
    this.type,
    this.language,
    this.genres,
    this.status,
    this.runtime,
    this.averageRuntime,
    this.premiered,
    this.ended,
    this.officialSite,
    this.schedule,
    this.rating,
    this.weight,
    this.network,
    this.webChannel,
    this.dvdCountry,
    this.externals,
    this.image,
    this.summary,
    this.updated,
    this.Links,
  });
  SearchShowsShow.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    url = json['url']?.toString();
    name = json['name']?.toString();
    type = json['type']?.toString();
    language = json['language']?.toString();
    if (json['genres'] != null) {
      final v = json['genres'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      genres = arr0;
    }
    status = json['status']?.toString();
    runtime = json['runtime']?.toInt();
    averageRuntime = json['averageRuntime']?.toInt();
    premiered = json['premiered']?.toString();
    ended = json['ended']?.toString();
    officialSite = json['officialSite']?.toString();
    schedule = (json['schedule'] != null)
        ? SearchShowsShowSchedule.fromJson(json['schedule'])
        : null;
    rating = (json['rating'] != null)
        ? SearchShowsShowRating.fromJson(json['rating'])
        : null;
    weight = json['weight']?.toInt();
    network = (json['network'] != null)
        ? SearchShowsShowNetwork.fromJson(json['network'])
        : null;
    webChannel = json['webChannel']?.toString();
    dvdCountry = json['dvdCountry']?.toString();
    externals = (json['externals'] != null)
        ? SearchShowsShowExternals.fromJson(json['externals'])
        : null;
    image = (json['image'] != null)
        ? SearchShowsShowImage.fromJson(json['image'])
        : null;
    summary = json['summary']?.toString();
    updated = json['updated']?.toInt();
    Links = (json['_links'] != null)
        ? SearchShowsShowLinks.fromJson(json['_links'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['url'] = url;
    data['name'] = name;
    data['type'] = type;
    data['language'] = language;
    if (genres != null) {
      final v = genres;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['genres'] = arr0;
    }
    data['status'] = status;
    data['runtime'] = runtime;
    data['averageRuntime'] = averageRuntime;
    data['premiered'] = premiered;
    data['ended'] = ended;
    data['officialSite'] = officialSite;
    if (schedule != null) {
      data['schedule'] = schedule!.toJson();
    }
    if (rating != null) {
      data['rating'] = rating!.toJson();
    }
    data['weight'] = weight;
    if (network != null) {
      data['network'] = network!.toJson();
    }
    data['webChannel'] = webChannel;
    data['dvdCountry'] = dvdCountry;
    if (externals != null) {
      data['externals'] = externals!.toJson();
    }
    if (image != null) {
      data['image'] = image!.toJson();
    }
    data['summary'] = summary;
    data['updated'] = updated;
    if (Links != null) {
      data['_links'] = Links!.toJson();
    }
    return data;
  }
}

class SearchShows {
/*
{
  "score": 0.69551843,
  "show": {
    "id": 53994,
    "url": "https://www.tvmaze.com/shows/53994/under-investigation",
    "name": "Under Investigation",
    "type": "Documentary",
    "language": "English",
    "genres": [
      "Crime"
    ],
    "status": "Running",
    "runtime": 60,
    "averageRuntime": 56,
    "premiered": "2021-03-01",
    "ended": null,
    "officialSite": "https://www.9now.com.au/under-investigation",
    "schedule": {
      "time": "21:00",
      "days": [
        "Wednesday"
      ]
    },
    "rating": {
      "average": null
    },
    "weight": 88,
    "network": {
      "id": 120,
      "name": "Nine Network",
      "country": {
        "name": "Australia",
        "code": "AU",
        "timezone": "Australia/Sydney"
      }
    },
    "webChannel": null,
    "dvdCountry": null,
    "externals": {
      "tvrage": null,
      "thetvdb": 397733,
      "imdb": "tt14188230"
    },
    "image": {
      "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/299/748247.jpg",
      "original": "https://static.tvmaze.com/uploads/images/original_untouched/299/748247.jpg"
    },
    "summary": "<p><b>Under Investigation</b> will seek to solve crimes, uncover new evidence, hear from people who have never spoken publicly, while harnessing great knowledge and skill with exciting and innovative storytelling techniques.</p>",
    "updated": 1646295576,
    "_links": {
      "self": {
        "href": "https://api.tvmaze.com/shows/53994"
      },
      "previousepisode": {
        "href": "https://api.tvmaze.com/episodes/2288003"
      }
    }
  }
} 
*/

  double? score;
  SearchShowsShow? theShow;

  SearchShows({
    this.score,
    this.theShow,
  });
  SearchShows.fromJson(Map<String, dynamic> json) {
    score = json['score']?.toDouble();
    theShow =
        (json['show'] != null) ? SearchShowsShow.fromJson(json['show']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['score'] = score;
    if (theShow != null) {
      data['show'] = theShow!.toJson();
    }
    return data;
  }
}